using CONST;
using Cysharp.Threading.Tasks;
using DG.Tweening;
using Newtonsoft.Json.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;
using UnityEngine.UI;

public class CardManager : MonoBehaviour
{
    public QuestManager questManager;

    // ?????O???J?[?h?u????
    [SerializeField]
    RectTransform position0;

    // ?J?[?h?\???????e?I?u?W?F?N?g
    [SerializeField]
    public RectTransform parentCardPositions;

    // ?J?[?h???X?g
    public List<RectTransform> eventCardList;

    // ?J?[?h???z?u???X?g
    public List<RectTransform> cardPostions;

    // ?v???C???[???I?????\???J?[?h????
    public int canSelectCardNumber = 3;

    // Update is called once per frame
    void Update()
    {

    }
    /// <summary>
    /// ??????????(??????start????QuestManager?????x?????s??????????)
    /// </summary>
    public void Initialize()
    {
        RectTransform[] cardDisplayArea = parentCardPositions.GetComponentsInChildren<RectTransform>();
        foreach (var item in cardDisplayArea.Select((value, index) => new { value, index }))
        {
            if (item.index == 0 || item.index == 1)
                continue;

            cardPostions.Add(item.value.GetComponent<RectTransform>());
            item.value.gameObject.SetActive(false);

        }
    }

    /// <summary>
    /// ?????O???J?[?h???????????z?u
    /// </summary>
    /// <param name="cardList"></param>
    public void CreateCardOnPositon0(List<CONST.QUEST.CardType> cardList)
    {
        foreach (var card in cardList.Select((value, index) => new { value, index }))
        {
            int cardNo = (int)card.value;
            var targetCardPrefab = GameObject.Instantiate(position0);
            targetCardPrefab.transform.SetParent(parentCardPositions.transform, false);
            targetCardPrefab.name = $"card_{cardNo}_{card.index}";
            targetCardPrefab.GetComponent<CardPropertyManager>().SetCardType(card.value);
            targetCardPrefab.GetComponent<CardPropertyManager>().SetCardRowID(card.index);

            // ?J?[?h????????

            // ?J?[?h???X?g??????
            eventCardList.Add(targetCardPrefab);

            targetCardPrefab.gameObject.SetActive(true);

        }

        this.MoveCardToEachPosition(eventCardList);

        // ????????X?????I?????\??????????
        SetCanSelected(this.canSelectCardNumber);
    }

    /// <summary>
    /// ?J?[?h?????????????\?????u??????????
    /// </summary>
    public void MoveCardToEachPosition(List<RectTransform> eventCardList)
    {
        foreach (var card in eventCardList.Select((value, index) => new { value, index }))
        {
            card.value.GetComponents<CardUIManager>().Initialize();

            // ?I?????????J?[?h?????????\??????
            if (card.index <= canSelectCardNumber - 1)
            {
                card.value.GetComponent<CardUIManager>().MoveCardFixedPositionWithOpenCard(cardPostions[card.index].anchoredPosition, CONST.ANIMATION_SPEED.FLIP_CARD_SPEED);
            }
            else
            {
                card.value.GetComponent<CardUIManager>().MoveCardFixedPosition(cardPostions[card.index].anchoredPosition, CONST.ANIMATION_SPEED.FLIP_CARD_SPEED);

            }
        }
    }

    /// <summary>
    /// ?I?????????J?[?h???C?x???g?????s???????C???^?[?t?F?[?X
    /// </summary>
    public async void DoEvent(CONST.QUEST.CardType selectedCardType, int rowID)
    {
        // ?J?[?h?I???s???????????s
        this.SetCanSelectedAllCard(false);

        // ?I?????????J?[?h?????c?????A???????O???I?????\?????????J?[?h??UI??????????
        await this.DropUnselectedCard(rowID);

        // ?C?x???g???s
        // QuestManager???C?x???g???????????n?????A???????????s??????
        questManager.executeCardEvent(selectedCardType);
    }

    /// ???????w???????????J?[?h???I?????\??????
    /// </summary>
    /// <param name="canSelectedCardNumber"></param>
    public void SetCanSelected(int canSelectedCardNumber)
    {
        for (int i = 0; i < canSelectedCardNumber; i++)
        {
            this.eventCardList[i].gameObject.GetComponent<CardPropertyManager>().SetCanSelectCard(true);
        }
    }

    /// <summary>
    /// ?S?J?[?h???I???t???O????????????
    /// </summary>
    /// <param name="canSelect"></param>
    public void SetCanSelectedAllCard(bool canSelect)
    {
        foreach (RectTransform card in this.eventCardList)
        {
            card.gameObject.GetComponent<CardPropertyManager>().SetCanSelectCard(canSelect);
        }
    }

    // ?I?????????J?[?h?????c?????A???????O???I?????\?????????J?[?h??UI??????????
    public async UniTask DropUnselectedCard(int selectedCardIndex)
    {
        Sequence drop_sequence = DOTween.Sequence();
        foreach (var card in this.eventCardList.Select((value, index) => new { value, index }))
        {
            if (card.index != selectedCardIndex && card.index < canSelectCardNumber)
            {
                card.value.gameObject.GetComponent<CardUIManager>().FadeOutForUnder(seq: drop_sequence);
            }
        }

        await drop_sequence.AsyncWaitForCompletion();
    }
}
